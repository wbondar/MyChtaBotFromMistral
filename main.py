import os
import logging
import asyncio
import json
import http.server
import socketserver
import threading
import webbrowser
from telegram import Update, Message, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from text_to_speech import send_voice_message
from speech_to_text import handle_voice_to_text

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É
HTML_FILE_PATH = "puter_ai.html"

# –ü–æ—Ä—Ç –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
PORT = 8000

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
global_response = ""

class RequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.path = HTML_FILE_PATH
        return http.server.SimpleHTTPRequestHandler.do_GET(self)

def start_server():
    handler = RequestHandler
    with socketserver.TCPServer(("", PORT), handler) as httpd:
        print(f"Serving at port {PORT}")
        httpd.serve_forever()

def open_html_file():
    webbrowser.open(f"http://localhost:{PORT}")

async def send_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str, parse_mode=None) -> None:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    message = await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode)
    return message  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã...')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_message = update.message.text
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_message = user_message.replace('\n', ' ')

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_data –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if 'user_message' not in context.user_data:
        context.user_data['user_message'] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback_timeout
    context.user_data['user_message'][chat_id] = user_message

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
    keyboard = [
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data="text")],
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º", callback_data="voice")],
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏ –≥–æ–ª–æ—Å–æ–º", callback_data="both")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=reply_markup)

async def callback_timeout(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞."""
    chat_id = context.job.chat_id
    message_id = context.job.data

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_data –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if 'user_message' not in context.user_data:
        context.user_data['user_message'] = {}

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_data
    user_message = context.user_data['user_message'].get(chat_id)

    if not user_message:
        logging.error("User message not found in user_data")
        await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ HTML —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Puter.js
        global global_response
        global_response = ""
        open_html_file()
        await asyncio.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

        reply_text = global_response
        logging.info(f"Received reply from Puter.js: {reply_text}")

        if not reply_text.strip():
            raise ValueError("Message text is empty")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å
        await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=reply_text)
        await send_voice_message(context, chat_id, reply_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Puter.js: {str(e)}")
        await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Puter.js: {str(e)}')

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    chat_id = query.message.chat_id

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_data –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if 'user_message' not in context.user_data:
        context.user_data['user_message'] = {}

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_data
    user_message = context.user_data['user_message'].get(chat_id)

    if not user_message:
        logging.error("User message not found in user_data")
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await query.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
    waiting_message = await query.edit_message_text("üõ†Ô∏è‚è∞–ì–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –æ—Ç–≤–µ—Ç! –ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞
    context.job_queue.run_once(callback_timeout, 0, chat_id=chat_id, data=waiting_message.message_id)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ HTML —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Puter.js
        global global_response
        global_response = ""
        open_html_file()
        await asyncio.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

        reply_text = global_response
        logging.info(f"Received reply from Puter.js: {reply_text}")

        if query.data == "voice":
            await context.bot.delete_message(chat_id=chat_id, message_id=waiting_message.message_id)
            await send_voice_message(context, chat_id, reply_text)
        elif query.data == "text":
            await context.bot.edit_message_text(chat_id=chat_id, message_id=waiting_message.message_id, text=reply_text)
        elif query.data == "both":
            await context.bot.edit_message_text(chat_id=chat_id, message_id=waiting_message.message_id, text=reply_text)
            await send_voice_message(context, chat_id, reply_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Puter.js: {str(e)}")
        await context.bot.edit_message_text(chat_id=chat_id, message_id=waiting_message.message_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Puter.js: {str(e)}')

    await query.answer()

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    chat_id = update.message.chat_id
    voice = update.message.voice

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await context.bot.get_file(voice.file_id)
        voice_path = f"/tmp/{voice.file_id}.ogg"
        await voice_file.download_to_drive(voice_path)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
        text = await handle_voice_to_text(context, chat_id, voice_path)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_message = await context.bot.send_message(chat_id=chat_id, text=text)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Update —Å —Ç–µ–∫—Å—Ç–æ–º
        new_update = Update(
            update_id=update.update_id,
            message=new_message
        )
        await handle_message(new_update, context)

    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=str(e))

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞."""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE & ~filters.COMMAND, handle_voice))
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = threading.Thread(target=start_server)
    server_thread.daemon = True
    server_thread.start()

    await application.initialize()
    await application.start()
    await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)

    try:
        while True:
            await asyncio.sleep(1)  # –ü—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await application.stop()
        await application.updater.stop()
        await application.shutdown()

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
